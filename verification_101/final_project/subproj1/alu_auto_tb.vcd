$date
    Feb 22, 2025  10:57:34
$end
$version
    TOOL:	xmsim(64)	24.09-s001
$end
$timescale
    1 ns
$end

$scope module alu_auto_tb $end
$var reg       1 !    clock $end
$var reg       1 "    reset $end
$var reg       8 #    A [7:0] $end
$var reg       8 $    B [7:0] $end
$var reg       4 %    ALU_Sel [3:0] $end
$var reg       8 &    ALU_Out [7:0] $end
$var reg       1 '    CarryOut $end

$scope module alu_inst $end
$var wire      1 (    clock  $end
$var wire      1 )    reset  $end
$var wire      8 *    A [7:0] $end
$var wire      8 +    B [7:0] $end
$var wire      4 ,    ALU_Sel [3:0] $end
$var reg       8 -    ALU_Out [7:0] $end
$var reg       1 .    CarryOut $end
$var reg       8 /    ALU_Result [7:0] $end
$var wire      9 0    tmp [8:0] $end
$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
0!
x"
bx #
bx $
bx %
bx &
0'
0(
x)
bx *
bx +
bx ,
bx -
0.
bx /
bx 0
$end
#5
1!
1(
#10
1"
b0 #
b0 $
b0 %
0!
0(
b0 ,
b0 +
b0 *
1)
b0 /
b0 0
b0 -
b0 &
#15
1!
1(
#20
0"
0!
0(
0)
#25
1!
1(
#30
b10011101 #
b1100000 $
0!
0(
b1100000 +
b10011101 *
b11111101 /
b11111101 0
#35
1!
1(
b11111101 -
b11111101 &
#40
b10110001 #
b10011111 $
0!
0(
b10011111 +
b10110001 *
b1010000 /
b101010000 0
#45
1!
1(
b1010000 -
1.
1'
b1010000 &
#50
b10010111 #
b11011 $
0!
0(
b11011 +
b10010111 *
b10110010 /
b10110010 0
#55
1!
1(
b10110010 -
0.
0'
b10110010 &
#60
b100111 #
b11000 $
0!
0(
b11000 +
b100111 *
b111111 /
b111111 0
#65
1!
1(
b111111 -
b111111 &
#70
b10001001 #
b111000 $
0!
0(
b111000 +
b10001001 *
b11000001 /
b11000001 0
#75
1!
1(
b11000001 -
b11000001 &
#80
b1010101 #
b110110 $
b1 %
0!
0(
b1 ,
b110110 +
b1010101 *
b11111 /
b10001011 0
#85
1!
1(
b11111 -
b11111 &
#90
b111000 #
b10000 $
0!
0(
b10000 +
b111000 *
b101000 /
b1001000 0
#95
1!
1(
b101000 -
b101000 &
#100
b11101010 #
b111100 $
0!
0(
b111100 +
b11101010 *
b10101110 /
b100100110 0
#105
1!
1(
b10101110 -
1.
1'
b10101110 &
#110
b11000100 #
b1111011 $
0!
0(
b1111011 +
b11000100 *
b1001001 /
b100111111 0
#115
1!
1(
b1001001 -
b1001001 &
#120
b101011 #
b110 $
0!
0(
b110 +
b101011 *
b100101 /
b110001 0
#125
1!
1(
b100101 -
0.
0'
b100101 &
#130
b1110 #
b1011 $
b10 %
0!
0(
b10 ,
b1011 +
b1110 *
b10011010 /
b11001 0
#135
1!
1(
b10011010 -
b10011010 &
#140
b1100 #
b11 $
0!
0(
b11 +
b1100 *
b100100 /
b1111 0
#145
1!
1(
b100100 -
b100100 &
#150
0!
0(
#155
1!
1(
#160
b1111 #
b1010 $
0!
0(
b1010 +
b1111 *
b10010110 /
b11001 0
#165
1!
1(
b10010110 -
b10010110 &
#170
b0 #
b0 $
0!
0(
b0 +
b0 *
b0 /
b0 0
#175
1!
1(
b0 -
b0 &
#180
b100100 #
b100010 $
b11 %
0!
0(
b11 ,
b100010 +
b100100 *
b1 /
b1000110 0
#185
1!
1(
b1 -
b1 &
#190
b11101 #
b100 $
0!
0(
b100 +
b11101 *
b111 /
b100001 0
#195
1!
1(
b111 -
b111 &
#200
b10011 #
b10001 $
0!
0(
b10001 +
b10011 *
b1 /
b100100 0
#205
1!
1(
b1 -
b1 &
#210
b11110100 #
b101111 $
0!
0(
b101111 +
b11110100 *
b101 /
b100100011 0
#215
1!
1(
b101 -
1.
1'
b101 &
#220
b10110111 #
b1011010 $
0!
0(
b1011010 +
b10110111 *
b10 /
b100010001 0
#225
1!
1(
b10 -
b10 &
#230
b100 %
0!
0(
b100 ,
b10101100 /
#235
1!
1(
b10101100 -
b10101100 &
#240
