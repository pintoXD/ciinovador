$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $scope module datapath101_tb $end
   $var wire 3 # mocked_ra1 [2:0] $end
   $var wire 3 $ mocked_ra2 [2:0] $end
   $var wire 3 % mocked_wa3 [2:0] $end
   $var wire 1 & mocked_we3 $end
   $var wire 8 ' mocked_wd3 [7:0] $end
   $var wire 8 ( mock_constante [7:0] $end
   $var wire 3 ) mock_ULAControl [2:0] $end
   $var wire 1 * mock_select_src $end
   $var wire 1 M test_clk $end
   $var wire 1 + test_reset $end
   $var wire 8 N dut_ULAResult [7:0] $end
   $var wire 1 O dut_FlagZ $end
   $scope module DUT $end
    $var wire 3 # ra1 [2:0] $end
    $var wire 3 $ ra2 [2:0] $end
    $var wire 3 % wa3 [2:0] $end
    $var wire 1 & we3 $end
    $var wire 8 ' wd3 [7:0] $end
    $var wire 8 ( constante [7:0] $end
    $var wire 3 ) ULAControl [2:0] $end
    $var wire 1 * select_src $end
    $var wire 1 M clk $end
    $var wire 1 + rst $end
    $var wire 8 N ULAResult [7:0] $end
    $var wire 1 O FlagZ $end
    $var wire 8 P w_rd1SrcA [7:0] $end
    $var wire 8 Q w_rd2 [7:0] $end
    $var wire 8 R w_SrcB [7:0] $end
    $scope module muxULAsrc_inst $end
     $var wire 1 * select_src $end
     $var wire 8 Q w_rd2 [7:0] $end
     $var wire 8 ( constante [7:0] $end
     $var wire 8 R w_SrcB [7:0] $end
    $upscope $end
    $scope module reg8_bank_inst $end
     $var wire 1 M clk $end
     $var wire 1 + rst $end
     $var wire 1 & we3 $end
     $var wire 3 % wa3 [2:0] $end
     $var wire 3 # ra1 [2:0] $end
     $var wire 3 $ ra2 [2:0] $end
     $var wire 8 ' wd3 [7:0] $end
     $var wire 8 P rd1 [7:0] $end
     $var wire 8 Q rd2 [7:0] $end
     $var wire 8 , X_in_word[0] [7:0] $end
     $var wire 8 - X_in_word[1] [7:0] $end
     $var wire 8 . X_in_word[2] [7:0] $end
     $var wire 8 / X_in_word[3] [7:0] $end
     $var wire 8 0 X_in_word[4] [7:0] $end
     $var wire 8 1 X_in_word[5] [7:0] $end
     $var wire 8 2 X_in_word[6] [7:0] $end
     $var wire 8 3 X_in_word[7] [7:0] $end
     $var wire 8 4 X_out_word[0] [7:0] $end
     $var wire 8 5 X_out_word[1] [7:0] $end
     $var wire 8 6 X_out_word[2] [7:0] $end
     $var wire 8 7 X_out_word[3] [7:0] $end
     $var wire 8 8 X_out_word[4] [7:0] $end
     $var wire 8 9 X_out_word[5] [7:0] $end
     $var wire 8 : X_out_word[6] [7:0] $end
     $var wire 8 ; X_out_word[7] [7:0] $end
     $scope module genblk1[0] $end
      $scope module X $end
       $var wire 1 M clk $end
       $var wire 1 S reset $end
       $var wire 8 < in_word [7:0] $end
       $var wire 8 = out_word [7:0] $end
      $upscope $end
     $upscope $end
     $scope module genblk1[1] $end
      $scope module X $end
       $var wire 1 M clk $end
       $var wire 1 S reset $end
       $var wire 8 > in_word [7:0] $end
       $var wire 8 ? out_word [7:0] $end
      $upscope $end
     $upscope $end
     $scope module genblk1[2] $end
      $scope module X $end
       $var wire 1 M clk $end
       $var wire 1 S reset $end
       $var wire 8 @ in_word [7:0] $end
       $var wire 8 A out_word [7:0] $end
      $upscope $end
     $upscope $end
     $scope module genblk1[3] $end
      $scope module X $end
       $var wire 1 M clk $end
       $var wire 1 S reset $end
       $var wire 8 B in_word [7:0] $end
       $var wire 8 C out_word [7:0] $end
      $upscope $end
     $upscope $end
     $scope module genblk1[4] $end
      $scope module X $end
       $var wire 1 M clk $end
       $var wire 1 S reset $end
       $var wire 8 D in_word [7:0] $end
       $var wire 8 E out_word [7:0] $end
      $upscope $end
     $upscope $end
     $scope module genblk1[5] $end
      $scope module X $end
       $var wire 1 M clk $end
       $var wire 1 S reset $end
       $var wire 8 F in_word [7:0] $end
       $var wire 8 G out_word [7:0] $end
      $upscope $end
     $upscope $end
     $scope module genblk1[6] $end
      $scope module X $end
       $var wire 1 M clk $end
       $var wire 1 S reset $end
       $var wire 8 H in_word [7:0] $end
       $var wire 8 I out_word [7:0] $end
      $upscope $end
     $upscope $end
     $scope module genblk1[7] $end
      $scope module X $end
       $var wire 1 M clk $end
       $var wire 1 S reset $end
       $var wire 8 J in_word [7:0] $end
       $var wire 8 K out_word [7:0] $end
      $upscope $end
     $upscope $end
     $scope module unnamedblk1 $end
      $var wire 32 L ind [31:0] $end
     $upscope $end
    $upscope $end
    $scope module ula_inst $end
     $var wire 8 P SrcA [7:0] $end
     $var wire 8 R SrcB [7:0] $end
     $var wire 3 ) ULAControl [2:0] $end
     $var wire 8 N ULAResult [7:0] $end
     $var wire 1 O FlagZ $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b000 #
b000 $
b000 %
0&
b00000000 '
b00000000 (
b000 )
0*
0+
b00000000 ,
b00000000 -
b00000000 .
b00000000 /
b00000000 0
b00000000 1
b00000000 2
b00000000 3
b00000000 4
b00000000 5
b00000000 6
b00000000 7
b00000000 8
b00000000 9
b00000000 :
b00000000 ;
b00000000 <
b00000000 =
b00000000 >
b00000000 ?
b00000000 @
b00000000 A
b00000000 B
b00000000 C
b00000000 D
b00000000 E
b00000000 F
b00000000 G
b00000000 H
b00000000 I
b00000000 J
b00000000 K
b00000000000000000000000000000000 L
0M
b00000000 N
1O
b00000000 P
b00000000 Q
b00000000 R
1S
#5000
b00000000000000000000000000001000 L
1M
#10000
0M
#15000
1+
1M
#20000
0M
#25000
1M
#30000
0M
#35000
1M
#40000
0M
#45000
b001 %
1&
b01011010 '
b01011010 -
b01011010 >
1M
#50000
0M
#55000
b01011010 5
b01011010 ?
1M
#60000
0M
#65000
1M
#70000
0M
#75000
0&
1M
#80000
0M
#85000
b010 %
1&
b01011011 '
b01011011 .
b01011011 @
1M
#90000
0M
#95000
b01011011 6
b01011011 A
1M
#100000
0M
#105000
0&
1M
#110000
0M
#115000
b011 %
1&
b01011100 '
b01011100 /
b01011100 B
1M
#120000
0M
#125000
b01011100 7
b01011100 C
1M
#130000
0M
#135000
0&
1M
#140000
0M
#145000
b100 %
1&
b01011101 '
b01011101 0
b01011101 D
1M
#150000
0M
#155000
b01011101 8
b01011101 E
1M
#160000
0M
#165000
0&
1M
#170000
0M
#175000
b101 %
1&
b01011110 '
b01011110 1
b01011110 F
1M
#180000
0M
#185000
b01011110 9
b01011110 G
1M
#190000
0M
#195000
0&
1M
#200000
0M
#205000
b110 %
1&
b01011111 '
b01011111 2
b01011111 H
1M
#210000
0M
#215000
b01011111 :
b01011111 I
1M
#220000
0M
#225000
0&
1M
#230000
0M
#235000
b111 %
1&
b01010000 '
b01010000 3
b01010000 J
1M
#240000
0M
#245000
b01010000 ;
b01010000 K
1M
#250000
0M
#255000
0&
1M
#260000
0M
#265000
b001 #
b010 $
1M
b10110101 N
0O
b01011010 P
b01011011 Q
b01011011 R
#270000
0M
#275000
1M
#280000
0M
#285000
1M
#290000
0M
#295000
1M
#300000
0M
#305000
b011 #
b100 $
1M
b10111001 N
b01011100 P
b01011101 Q
b01011101 R
#310000
0M
#315000
1M
#320000
0M
#325000
b101 #
b110 $
1M
b10111101 N
b01011110 P
b01011111 Q
b01011111 R
#330000
0M
#335000
1M
#340000
0M
#345000
b111 #
b000 $
1M
b01010000 N
b01010000 P
b00000000 Q
b00000000 R
#350000
0M
#355000
1M
#360000
0M
#365000
b10101111 (
1*
1M
b11111111 N
b10101111 R
#370000
0M
#375000
1M
#380000
0M
#385000
b011 #
b001 $
b001 )
0*
1M
b00000010 N
b01011100 P
b01011010 Q
b01011010 R
#390000
0M
#395000
1M
#400000
0M
#405000
b001 #
b011 $
1M
b11111110 N
b01011010 P
b01011100 Q
b01011100 R
#410000
0M
#415000
1M
#420000
0M
#425000
b011 #
b01000000 (
1*
1M
b00011100 N
b01011100 P
b01000000 R
#430000
0M
#435000
1M
#440000
0M
#445000
b01100000 (
1M
b11111100 N
b01100000 R
#450000
0M
#455000
1M
#460000
0M
#465000
b101 #
b010 $
b010 )
0*
1M
b01011010 N
b01011110 P
b01011011 Q
b01011011 R
#470000
0M
#475000
1M
#480000
0M
#485000
b000 #
b101 $
1M
b00000000 N
1O
b00000000 P
b01011110 Q
b01011110 R
#490000
0M
#495000
1M
#500000
0M
#505000
b100 #
b11111111 (
1*
1M
b01011101 N
0O
b01011101 P
b11111111 R
#510000
0M
#515000
1M
#520000
0M
#525000
b00000000 (
1M
b00000000 N
1O
b00000000 R
#530000
0M
#535000
1M
#540000
0M
#545000
b110 #
b010 $
b011 )
0*
1M
b01011111 N
0O
b01011111 P
b01011011 Q
b01011011 R
#550000
0M
#555000
1M
#560000
0M
#565000
b001 #
b100 $
1M
b01011010 P
b01011101 Q
b01011101 R
#570000
0M
#575000
1M
#580000
0M
#585000
b011 #
b11111111 (
1*
1M
b11111111 N
b01011100 P
b11111111 R
#590000
0M
#595000
1M
#600000
0M
#605000
b110 #
b00000000 (
1M
b01011111 N
b01011111 P
b00000000 R
#610000
0M
#615000
1M
#620000
0M
#625000
b101 )
0*
1M
b00000000 N
1O
b01011101 R
#630000
0M
#635000
1M
#640000
0M
#645000
b100 #
b110 $
1M
b11111111 N
0O
b01011101 P
b01011111 Q
b01011111 R
#650000
0M
#655000
1M
#660000
0M
#665000
b011 #
b11111111 (
1*
1M
b01011100 P
b11111111 R
#670000
0M
#675000
1M
#680000
0M
#685000
b111 #
b00000000 (
1M
b00000000 N
1O
b01010000 P
b00000000 R
#690000
0M
#695000
1M
#700000
0M
#705000
1M
