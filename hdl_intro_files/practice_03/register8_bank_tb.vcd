$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $scope module register8_bank_tb $end
   $var wire 1 8 test_clk $end
   $var wire 1 # test_reset $end
   $var wire 1 $ write_enable $end
   $var wire 8 % write_data [7:0] $end
   $var wire 3 & write_addr [2:0] $end
   $var wire 3 ' reg_addr_1 [2:0] $end
   $var wire 3 ( reg_addr_2 [2:0] $end
   $var wire 8 9 reg_data_1 [7:0] $end
   $var wire 8 : reg_data_2 [7:0] $end
   $scope module dut $end
    $var wire 1 8 clk $end
    $var wire 1 # rst $end
    $var wire 1 $ write_enable $end
    $var wire 3 & write_addr [2:0] $end
    $var wire 3 ' reg_addr_1 [2:0] $end
    $var wire 3 ( reg_addr_2 [2:0] $end
    $var wire 8 % write_data [7:0] $end
    $var wire 8 9 reg_data_1 [7:0] $end
    $var wire 8 : reg_data_2 [7:0] $end
    $var wire 8 ) X1_in_word [7:0] $end
    $var wire 8 * X2_in_word [7:0] $end
    $var wire 8 + X3_in_word [7:0] $end
    $var wire 8 , X4_in_word [7:0] $end
    $var wire 8 - X5_in_word [7:0] $end
    $var wire 8 . X6_in_word [7:0] $end
    $var wire 8 / X7_in_word [7:0] $end
    $var wire 8 0 X0_out_word [7:0] $end
    $var wire 8 1 X1_out_word [7:0] $end
    $var wire 8 2 X2_out_word [7:0] $end
    $var wire 8 3 X3_out_word [7:0] $end
    $var wire 8 4 X4_out_word [7:0] $end
    $var wire 8 5 X5_out_word [7:0] $end
    $var wire 8 6 X6_out_word [7:0] $end
    $var wire 8 7 X7_out_word [7:0] $end
    $scope module X0 $end
     $var wire 1 8 clk $end
     $var wire 1 # reset $end
     $var wire 8 ; in_word [7:0] $end
     $var wire 8 0 out_word [7:0] $end
    $upscope $end
    $scope module X1 $end
     $var wire 1 8 clk $end
     $var wire 1 # reset $end
     $var wire 8 ) in_word [7:0] $end
     $var wire 8 1 out_word [7:0] $end
    $upscope $end
    $scope module X2 $end
     $var wire 1 8 clk $end
     $var wire 1 # reset $end
     $var wire 8 * in_word [7:0] $end
     $var wire 8 2 out_word [7:0] $end
    $upscope $end
    $scope module X3 $end
     $var wire 1 8 clk $end
     $var wire 1 # reset $end
     $var wire 8 + in_word [7:0] $end
     $var wire 8 3 out_word [7:0] $end
    $upscope $end
    $scope module X4 $end
     $var wire 1 8 clk $end
     $var wire 1 # reset $end
     $var wire 8 , in_word [7:0] $end
     $var wire 8 4 out_word [7:0] $end
    $upscope $end
    $scope module X5 $end
     $var wire 1 8 clk $end
     $var wire 1 # reset $end
     $var wire 8 - in_word [7:0] $end
     $var wire 8 5 out_word [7:0] $end
    $upscope $end
    $scope module X6 $end
     $var wire 1 8 clk $end
     $var wire 1 # reset $end
     $var wire 8 . in_word [7:0] $end
     $var wire 8 6 out_word [7:0] $end
    $upscope $end
    $scope module X7 $end
     $var wire 1 8 clk $end
     $var wire 1 # reset $end
     $var wire 8 / in_word [7:0] $end
     $var wire 8 7 out_word [7:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
b00000000 %
b000 &
b000 '
b000 (
b00000000 )
b00000000 *
b00000000 +
b00000000 ,
b00000000 -
b00000000 .
b00000000 /
b00000000 0
b00000000 1
b00000000 2
b00000000 3
b00000000 4
b00000000 5
b00000000 6
b00000000 7
08
b00000000 9
b00000000 :
b00000000 ;
#5000
1#
18
#10000
0#
08
#15000
18
#20000
08
#25000
1$
b10101010 %
b001 &
b001 '
b10101010 )
18
#30000
08
#35000
b10101010 1
18
b10101010 9
#40000
08
#45000
0$
18
#50000
08
#55000
1$
b10111011 %
b010 &
b010 (
b10111011 *
18
#60000
08
#65000
b10111011 2
18
b10111011 :
#70000
08
#75000
0$
18
#80000
08
#85000
b11111111 %
b001 &
18
#90000
08
#95000
18
#100000
08
#105000
1$
b11001100 %
b011 &
b011 '
b11001100 +
18
b00000000 9
#110000
08
#115000
b11001100 3
18
b11001100 9
#120000
08
#125000
0$
18
#130000
08
#135000
1$
b11011101 %
b100 &
b100 (
b11011101 ,
18
b00000000 :
#140000
08
#145000
b11011101 4
18
b11011101 :
#150000
08
#155000
0$
18
#160000
08
#165000
b11111111 %
18
#170000
08
#175000
18
#180000
08
#185000
1$
b11101110 %
b101 &
b101 '
b11101110 -
18
b00000000 9
#190000
08
#195000
b11101110 5
18
b11101110 9
#200000
08
#205000
0$
18
#210000
08
#215000
1$
b11111111 %
b110 &
b110 (
b11111111 .
18
b00000000 :
#220000
08
#225000
b11111111 6
18
b11111111 :
#230000
08
#235000
0$
18
#240000
08
#245000
1$
b00010001 %
b111 &
b111 '
b00010001 /
18
b00000000 9
#250000
08
#255000
b00010001 7
18
b00010001 9
#260000
08
#265000
0$
18
#270000
08
#275000
b001 '
b010 (
18
b10101010 9
b10111011 :
#280000
08
#285000
18
#290000
08
#295000
b011 '
b100 (
18
b11001100 9
b11011101 :
#300000
08
#305000
18
#310000
08
#315000
b101 '
b110 (
18
b11101110 9
b11111111 :
#320000
08
#325000
18
#330000
08
#335000
b111 '
b000 (
18
b00010001 9
b00000000 :
#340000
08
#345000
18
#350000
08
#355000
1#
b00000000 )
b00000000 *
b00000000 +
b00000000 ,
b00000000 -
b00000000 .
b00000000 /
b00000000 1
b00000000 2
b00000000 3
b00000000 4
b00000000 5
b00000000 6
b00000000 7
18
b00000000 9
#360000
08
#365000
0#
18
#370000
08
#375000
18
#380000
08
#385000
b001 '
b010 (
18
#390000
08
#395000
18
#400000
08
#405000
b011 '
b100 (
18
#410000
08
#415000
18
#420000
08
#425000
b101 '
b110 (
18
#430000
08
#435000
18
#440000
08
#445000
b111 '
b000 (
18
#450000
08
#455000
18
#460000
08
#465000
18
