$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $scope module register8_bank_tb $end
   $var wire 1 J test_clk $end
   $var wire 1 # test_reset $end
   $var wire 1 $ we3 $end
   $var wire 8 % wd3 [7:0] $end
   $var wire 3 & wa3 [2:0] $end
   $var wire 3 ' ra1 [2:0] $end
   $var wire 3 ( ra2 [2:0] $end
   $var wire 8 K rd1 [7:0] $end
   $var wire 8 L rd2 [7:0] $end
   $scope module dut $end
    $var wire 1 J clk $end
    $var wire 1 # rst $end
    $var wire 1 $ we3 $end
    $var wire 3 & wa3 [2:0] $end
    $var wire 3 ' ra1 [2:0] $end
    $var wire 3 ( ra2 [2:0] $end
    $var wire 8 % wd3 [7:0] $end
    $var wire 8 K rd1 [7:0] $end
    $var wire 8 L rd2 [7:0] $end
    $var wire 8 ) X_in_word[0] [7:0] $end
    $var wire 8 * X_in_word[1] [7:0] $end
    $var wire 8 + X_in_word[2] [7:0] $end
    $var wire 8 , X_in_word[3] [7:0] $end
    $var wire 8 - X_in_word[4] [7:0] $end
    $var wire 8 . X_in_word[5] [7:0] $end
    $var wire 8 / X_in_word[6] [7:0] $end
    $var wire 8 0 X_in_word[7] [7:0] $end
    $var wire 8 1 X_out_word[0] [7:0] $end
    $var wire 8 2 X_out_word[1] [7:0] $end
    $var wire 8 3 X_out_word[2] [7:0] $end
    $var wire 8 4 X_out_word[3] [7:0] $end
    $var wire 8 5 X_out_word[4] [7:0] $end
    $var wire 8 6 X_out_word[5] [7:0] $end
    $var wire 8 7 X_out_word[6] [7:0] $end
    $var wire 8 8 X_out_word[7] [7:0] $end
    $scope module genblk1[0] $end
     $scope module X $end
      $var wire 1 J clk $end
      $var wire 1 M reset $end
      $var wire 8 9 in_word [7:0] $end
      $var wire 8 : out_word [7:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[1] $end
     $scope module X $end
      $var wire 1 J clk $end
      $var wire 1 M reset $end
      $var wire 8 ; in_word [7:0] $end
      $var wire 8 < out_word [7:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[2] $end
     $scope module X $end
      $var wire 1 J clk $end
      $var wire 1 M reset $end
      $var wire 8 = in_word [7:0] $end
      $var wire 8 > out_word [7:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[3] $end
     $scope module X $end
      $var wire 1 J clk $end
      $var wire 1 M reset $end
      $var wire 8 ? in_word [7:0] $end
      $var wire 8 @ out_word [7:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[4] $end
     $scope module X $end
      $var wire 1 J clk $end
      $var wire 1 M reset $end
      $var wire 8 A in_word [7:0] $end
      $var wire 8 B out_word [7:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[5] $end
     $scope module X $end
      $var wire 1 J clk $end
      $var wire 1 M reset $end
      $var wire 8 C in_word [7:0] $end
      $var wire 8 D out_word [7:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[6] $end
     $scope module X $end
      $var wire 1 J clk $end
      $var wire 1 M reset $end
      $var wire 8 E in_word [7:0] $end
      $var wire 8 F out_word [7:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[7] $end
     $scope module X $end
      $var wire 1 J clk $end
      $var wire 1 M reset $end
      $var wire 8 G in_word [7:0] $end
      $var wire 8 H out_word [7:0] $end
     $upscope $end
    $upscope $end
    $scope module unnamedblk1 $end
     $var wire 32 I ind [31:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
b00000000 %
b000 &
b000 '
b000 (
b00000000 )
b00000000 *
b00000000 +
b00000000 ,
b00000000 -
b00000000 .
b00000000 /
b00000000 0
b00000000 1
b00000000 2
b00000000 3
b00000000 4
b00000000 5
b00000000 6
b00000000 7
b00000000 8
b00000000 9
b00000000 :
b00000000 ;
b00000000 <
b00000000 =
b00000000 >
b00000000 ?
b00000000 @
b00000000 A
b00000000 B
b00000000 C
b00000000 D
b00000000 E
b00000000 F
b00000000 G
b00000000 H
b00000000000000000000000000000000 I
0J
b00000000 K
b00000000 L
1M
#5000
b00000000000000000000000000001000 I
1J
#10000
0J
#15000
1#
1J
#20000
0J
#25000
1J
#30000
0J
#35000
1J
#40000
0J
#45000
1$
b10101010 %
b001 &
b001 '
b10101010 *
b10101010 ;
1J
#50000
0J
#55000
b10101010 2
b10101010 <
1J
b10101010 K
#60000
0J
#65000
0$
1J
#70000
0J
#75000
1J
#80000
0J
#85000
1J
#90000
0J
#95000
1J
#100000
0J
#105000
1$
b10111011 %
b010 &
b010 (
b10111011 +
b10111011 =
1J
#110000
0J
#115000
b10111011 3
b10111011 >
1J
b10111011 L
#120000
0J
#125000
0$
1J
#130000
0J
#135000
b11111111 %
b001 &
1J
#140000
0J
#145000
1J
#150000
0J
#155000
1$
b11001100 %
b011 &
b011 '
b11001100 ,
b11001100 ?
1J
b00000000 K
#160000
0J
#165000
b11001100 4
b11001100 @
1J
b11001100 K
#170000
0J
#175000
0$
1J
#180000
0J
#185000
1$
b11011101 %
b100 &
b100 (
b11011101 -
b11011101 A
1J
b00000000 L
#190000
0J
#195000
b11011101 5
b11011101 B
1J
b11011101 L
#200000
0J
#205000
0$
1J
#210000
0J
#215000
b11111111 %
1J
#220000
0J
#225000
1J
#230000
0J
#235000
1$
b11101110 %
b101 &
b101 '
b11101110 .
b11101110 C
1J
b00000000 K
#240000
0J
#245000
b11101110 6
b11101110 D
1J
b11101110 K
#250000
0J
#255000
0$
1J
#260000
0J
#265000
1$
b11111111 %
b110 &
b110 (
b11111111 /
b11111111 E
1J
b00000000 L
#270000
0J
#275000
b11111111 7
b11111111 F
1J
b11111111 L
#280000
0J
#285000
0$
1J
#290000
0J
#295000
1$
b00010001 %
b111 &
b111 '
b00010001 0
b00010001 G
1J
b00000000 K
#300000
0J
#305000
b00010001 8
b00010001 H
1J
b00010001 K
#310000
0J
#315000
0$
1J
#320000
0J
#325000
b001 '
b010 (
1J
b10101010 K
b10111011 L
#330000
0J
#335000
1J
#340000
0J
#345000
b011 '
b100 (
1J
b11001100 K
b11011101 L
#350000
0J
#355000
1J
#360000
0J
#365000
b101 '
b110 (
1J
b11101110 K
b11111111 L
#370000
0J
#375000
1J
#380000
0J
#385000
b111 '
b000 (
1J
b00010001 K
b00000000 L
#390000
0J
#395000
1J
#400000
0J
#405000
0#
b00000000 *
b00000000 +
b00000000 ,
b00000000 -
b00000000 .
b00000000 /
b00000000 0
b00000000 ;
b00000000 =
b00000000 ?
b00000000 A
b00000000 C
b00000000 E
b00000000 G
1J
#410000
0J
#415000
1#
b00000000 2
b00000000 3
b00000000 4
b00000000 5
b00000000 6
b00000000 7
b00000000 8
b00000000 <
b00000000 >
b00000000 @
b00000000 B
b00000000 D
b00000000 F
b00000000 H
1J
b00000000 K
#420000
0J
#425000
1J
#430000
0J
#435000
b001 '
b010 (
1J
#440000
0J
#445000
1J
#450000
0J
#455000
b011 '
b100 (
1J
#460000
0J
#465000
1J
#470000
0J
#475000
b101 '
b110 (
1J
#480000
0J
#485000
1J
#490000
0J
#495000
b111 '
b000 (
1J
#500000
0J
#505000
1J
#510000
0J
#515000
1J
