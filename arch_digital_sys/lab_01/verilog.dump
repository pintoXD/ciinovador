$date
    Dec  2, 2024  11:36:35
$end
$version
    TOOL:	xmsim(64)	22.09-s013
$end
$timescale
    1 ps
$end

$scope module register32_bank_tb $end
$var reg       1 !    test_clk $end
$var reg       1 "    test_reset $end
$var reg       1 #    we5 $end
$var reg      32 $    wd32 [31:0] $end
$var reg       5 %    wa5 [4:0] $end
$var reg       5 &    ra1 [4:0] $end
$var reg       5 '    ra2 [4:0] $end
$var reg      32 (    rd1 [31:0] $end
$var reg      32 )    rd2 [31:0] $end
$var reg      32 *    base_wd32 [31:0] $end
$var reg       8 +    base_index [7:0] $end
$var reg       5 ,    base_read_data_1 [4:0] $end
$var reg       5 -    base_read_data_2 [4:0] $end

$scope module dut $end
$var wire      1 .    clk  $end
$var wire      1 /    rst  $end
$var wire      1 0    we5  $end
$var wire      5 1    wa5 [4:0] $end
$var wire      5 2    ra1 [4:0] $end
$var wire      5 3    ra2 [4:0] $end
$var wire     32 4    wd32 [31:0] $end
$var reg      32 5    rd1 [31:0] $end
$var reg      32 6    rd2 [31:0] $end
$var reg      32 7    X32_in_word[31] [31:0] $end
$var reg      32 8    X32_in_word[30] [31:0] $end
$var reg      32 9    X32_in_word[29] [31:0] $end
$var reg      32 :    X32_in_word[28] [31:0] $end
$var reg      32 ;    X32_in_word[27] [31:0] $end
$var reg      32 <    X32_in_word[26] [31:0] $end
$var reg      32 =    X32_in_word[25] [31:0] $end
$var reg      32 >    X32_in_word[24] [31:0] $end
$var reg      32 ?    X32_in_word[23] [31:0] $end
$var reg      32 @    X32_in_word[22] [31:0] $end
$var reg      32 A    X32_in_word[21] [31:0] $end
$var reg      32 B    X32_in_word[20] [31:0] $end
$var reg      32 C    X32_in_word[19] [31:0] $end
$var reg      32 D    X32_in_word[18] [31:0] $end
$var reg      32 E    X32_in_word[17] [31:0] $end
$var reg      32 F    X32_in_word[16] [31:0] $end
$var reg      32 G    X32_in_word[15] [31:0] $end
$var reg      32 H    X32_in_word[14] [31:0] $end
$var reg      32 I    X32_in_word[13] [31:0] $end
$var reg      32 J    X32_in_word[12] [31:0] $end
$var reg      32 K    X32_in_word[11] [31:0] $end
$var reg      32 L    X32_in_word[10] [31:0] $end
$var reg      32 M    X32_in_word[9] [31:0] $end
$var reg      32 N    X32_in_word[8] [31:0] $end
$var reg      32 O    X32_in_word[7] [31:0] $end
$var reg      32 P    X32_in_word[6] [31:0] $end
$var reg      32 Q    X32_in_word[5] [31:0] $end
$var reg      32 R    X32_in_word[4] [31:0] $end
$var reg      32 S    X32_in_word[3] [31:0] $end
$var reg      32 T    X32_in_word[2] [31:0] $end
$var reg      32 U    X32_in_word[1] [31:0] $end
$var reg      32 V    X32_in_word[0] [31:0] $end
$var reg      32 W    X32_out_word[31] [31:0] $end
$var reg      32 X    X32_out_word[30] [31:0] $end
$var reg      32 Y    X32_out_word[29] [31:0] $end
$var reg      32 Z    X32_out_word[28] [31:0] $end
$var reg      32 [    X32_out_word[27] [31:0] $end
$var reg      32 \    X32_out_word[26] [31:0] $end
$var reg      32 ]    X32_out_word[25] [31:0] $end
$var reg      32 ^    X32_out_word[24] [31:0] $end
$var reg      32 _    X32_out_word[23] [31:0] $end
$var reg      32 `    X32_out_word[22] [31:0] $end
$var reg      32 a    X32_out_word[21] [31:0] $end
$var reg      32 b    X32_out_word[20] [31:0] $end
$var reg      32 c    X32_out_word[19] [31:0] $end
$var reg      32 d    X32_out_word[18] [31:0] $end
$var reg      32 e    X32_out_word[17] [31:0] $end
$var reg      32 f    X32_out_word[16] [31:0] $end
$var reg      32 g    X32_out_word[15] [31:0] $end
$var reg      32 h    X32_out_word[14] [31:0] $end
$var reg      32 i    X32_out_word[13] [31:0] $end
$var reg      32 j    X32_out_word[12] [31:0] $end
$var reg      32 k    X32_out_word[11] [31:0] $end
$var reg      32 l    X32_out_word[10] [31:0] $end
$var reg      32 m    X32_out_word[9] [31:0] $end
$var reg      32 n    X32_out_word[8] [31:0] $end
$var reg      32 o    X32_out_word[7] [31:0] $end
$var reg      32 p    X32_out_word[6] [31:0] $end
$var reg      32 q    X32_out_word[5] [31:0] $end
$var reg      32 r    X32_out_word[4] [31:0] $end
$var reg      32 s    X32_out_word[3] [31:0] $end
$var reg      32 t    X32_out_word[2] [31:0] $end
$var reg      32 u    X32_out_word[1] [31:0] $end
$var reg      32 v    X32_out_word[0] [31:0] $end

$scope begin genblk1[0] $end
$var parameter 32 w    i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 x    reset  $end
$var wire     32 y    in_word [31:0] $end
$var reg      32 z    out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin genblk1[1] $end
$var parameter 32 {    i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 |    reset  $end
$var wire     32 }    in_word [31:0] $end
$var reg      32 ~    out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin genblk1[2] $end
$var parameter 32 !!   i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 "!   reset  $end
$var wire     32 #!   in_word [31:0] $end
$var reg      32 $!   out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin genblk1[3] $end
$var parameter 32 %!   i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 &!   reset  $end
$var wire     32 '!   in_word [31:0] $end
$var reg      32 (!   out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin genblk1[4] $end
$var parameter 32 )!   i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 *!   reset  $end
$var wire     32 +!   in_word [31:0] $end
$var reg      32 ,!   out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin genblk1[5] $end
$var parameter 32 -!   i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 .!   reset  $end
$var wire     32 /!   in_word [31:0] $end
$var reg      32 0!   out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin genblk1[6] $end
$var parameter 32 1!   i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 2!   reset  $end
$var wire     32 3!   in_word [31:0] $end
$var reg      32 4!   out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin genblk1[7] $end
$var parameter 32 5!   i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 6!   reset  $end
$var wire     32 7!   in_word [31:0] $end
$var reg      32 8!   out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin genblk1[8] $end
$var parameter 32 9!   i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 :!   reset  $end
$var wire     32 ;!   in_word [31:0] $end
$var reg      32 <!   out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin genblk1[9] $end
$var parameter 32 =!   i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 >!   reset  $end
$var wire     32 ?!   in_word [31:0] $end
$var reg      32 @!   out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin genblk1[10] $end
$var parameter 32 A!   i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 B!   reset  $end
$var wire     32 C!   in_word [31:0] $end
$var reg      32 D!   out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin genblk1[11] $end
$var parameter 32 E!   i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 F!   reset  $end
$var wire     32 G!   in_word [31:0] $end
$var reg      32 H!   out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin genblk1[12] $end
$var parameter 32 I!   i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 J!   reset  $end
$var wire     32 K!   in_word [31:0] $end
$var reg      32 L!   out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin genblk1[13] $end
$var parameter 32 M!   i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 N!   reset  $end
$var wire     32 O!   in_word [31:0] $end
$var reg      32 P!   out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin genblk1[14] $end
$var parameter 32 Q!   i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 R!   reset  $end
$var wire     32 S!   in_word [31:0] $end
$var reg      32 T!   out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin genblk1[15] $end
$var parameter 32 U!   i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 V!   reset  $end
$var wire     32 W!   in_word [31:0] $end
$var reg      32 X!   out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin genblk1[16] $end
$var parameter 32 Y!   i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 Z!   reset  $end
$var wire     32 [!   in_word [31:0] $end
$var reg      32 \!   out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin genblk1[17] $end
$var parameter 32 ]!   i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 ^!   reset  $end
$var wire     32 _!   in_word [31:0] $end
$var reg      32 `!   out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin genblk1[18] $end
$var parameter 32 a!   i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 b!   reset  $end
$var wire     32 c!   in_word [31:0] $end
$var reg      32 d!   out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin genblk1[19] $end
$var parameter 32 e!   i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 f!   reset  $end
$var wire     32 g!   in_word [31:0] $end
$var reg      32 h!   out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin genblk1[20] $end
$var parameter 32 i!   i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 j!   reset  $end
$var wire     32 k!   in_word [31:0] $end
$var reg      32 l!   out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin genblk1[21] $end
$var parameter 32 m!   i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 n!   reset  $end
$var wire     32 o!   in_word [31:0] $end
$var reg      32 p!   out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin genblk1[22] $end
$var parameter 32 q!   i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 r!   reset  $end
$var wire     32 s!   in_word [31:0] $end
$var reg      32 t!   out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin genblk1[23] $end
$var parameter 32 u!   i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 v!   reset  $end
$var wire     32 w!   in_word [31:0] $end
$var reg      32 x!   out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin genblk1[24] $end
$var parameter 32 y!   i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 z!   reset  $end
$var wire     32 {!   in_word [31:0] $end
$var reg      32 |!   out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin genblk1[25] $end
$var parameter 32 }!   i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 ~!   reset  $end
$var wire     32 !"   in_word [31:0] $end
$var reg      32 ""   out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin genblk1[26] $end
$var parameter 32 #"   i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 $"   reset  $end
$var wire     32 %"   in_word [31:0] $end
$var reg      32 &"   out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin genblk1[27] $end
$var parameter 32 '"   i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 ("   reset  $end
$var wire     32 )"   in_word [31:0] $end
$var reg      32 *"   out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin genblk1[28] $end
$var parameter 32 +"   i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 ,"   reset  $end
$var wire     32 -"   in_word [31:0] $end
$var reg      32 ."   out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin genblk1[29] $end
$var parameter 32 /"   i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 0"   reset  $end
$var wire     32 1"   in_word [31:0] $end
$var reg      32 2"   out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin genblk1[30] $end
$var parameter 32 3"   i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 4"   reset  $end
$var wire     32 5"   in_word [31:0] $end
$var reg      32 6"   out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin genblk1[31] $end
$var parameter 32 7"   i $end

$scope module X $end
$var wire      1 .    clk  $end
$var wire      1 8"   reset  $end
$var wire     32 9"   in_word [31:0] $end
$var reg      32 :"   out_word [31:0] $end
$upscope $end

$upscope $end


$scope begin unmblk1 $end
$var integer  32 ;"   indexer $end
$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
b11111 7"
b11110 3"
b11101 /"
b11100 +"
b11011 '"
b11010 #"
b11001 }!
b11000 y!
b10111 u!
b10110 q!
b10101 m!
b10100 i!
b10011 e!
b10010 a!
b10001 ]!
b10000 Y!
b1111 U!
b1110 Q!
b1101 M!
b1100 I!
b1011 E!
b1010 A!
b1001 =!
b1000 9!
b111 5!
b110 1!
b101 -!
b100 )!
b11 %!
b10 !!
b1 {
b0 w
0!
x"
x#
bx $
bx %
bx &
bx '
bx (
bx )
bx *
bx +
bx ,
bx -
0.
x/
x0
bx 1
bx 2
bx 3
bx 4
bx 5
bx 6
bx 7
bx 8
bx 9
bx :
bx ;
bx <
bx =
bx >
bx ?
bx @
bx A
bx B
bx C
bx D
bx E
bx F
bx G
bx H
bx I
bx J
bx K
bx L
bx M
bx N
bx O
bx P
bx Q
bx R
bx S
bx T
bx U
bx V
bx W
bx X
bx Y
bx Z
bx [
bx \
bx ]
bx ^
bx _
bx `
bx a
bx b
bx c
bx d
bx e
bx f
bx g
bx h
bx i
bx j
bx k
bx l
bx m
bx n
bx o
bx p
bx q
bx r
bx s
bx t
bx u
bx v
1x
bx y
bx z
1|
bx }
bx ~
1"!
bx #!
bx $!
1&!
bx '!
bx (!
1*!
bx +!
bx ,!
1.!
bx /!
bx 0!
12!
bx 3!
bx 4!
16!
bx 7!
bx 8!
1:!
bx ;!
bx <!
1>!
bx ?!
bx @!
1B!
bx C!
bx D!
1F!
bx G!
bx H!
1J!
bx K!
bx L!
1N!
bx O!
bx P!
1R!
bx S!
bx T!
1V!
bx W!
bx X!
1Z!
bx [!
bx \!
1^!
bx _!
bx `!
1b!
bx c!
bx d!
1f!
bx g!
bx h!
1j!
bx k!
bx l!
1n!
bx o!
bx p!
1r!
bx s!
bx t!
1v!
bx w!
bx x!
1z!
bx {!
bx |!
1~!
bx !"
bx ""
1$"
bx %"
bx &"
1("
bx )"
bx *"
1,"
bx -"
bx ."
10"
bx 1"
bx 2"
14"
bx 5"
bx 6"
18"
bx 9"
bx :"
b0 ;"
$end
#5000
1!
0"
0/
1.
b1 ;"
b10 ;"
b11 ;"
b100 ;"
b101 ;"
b110 ;"
b111 ;"
b1000 ;"
b1001 ;"
b1010 ;"
b1011 ;"
b1100 ;"
b1101 ;"
b1110 ;"
b1111 ;"
b10000 ;"
b10001 ;"
b10010 ;"
b10011 ;"
b10100 ;"
b10101 ;"
b10110 ;"
b10111 ;"
b11000 ;"
b11001 ;"
b11010 ;"
b11011 ;"
b11100 ;"
b11101 ;"
b11110 ;"
b11111 ;"
b100000 ;"
b0 V
b0 U
b0 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 :"
b0 6"
b0 2"
b0 ."
b0 *"
b0 &"
b0 ""
b0 |!
b0 x!
b0 t!
b0 p!
b0 l!
b0 h!
b0 d!
b0 `!
b0 \!
b0 X!
b0 T!
b0 P!
b0 L!
b0 H!
b0 D!
b0 @!
b0 <!
b0 8!
b0 4!
b0 0!
b0 ,!
b0 (!
b0 $!
b0 ~
b0 z
b0 y
b0 }
b0 #!
b0 '!
b0 +!
b0 /!
b0 3!
b0 7!
b0 ;!
b0 ?!
b0 C!
b0 G!
b0 K!
b0 O!
b0 S!
b0 W!
b0 [!
b0 _!
b0 c!
b0 g!
b0 k!
b0 o!
b0 s!
b0 w!
b0 {!
b0 !"
b0 %"
b0 )"
b0 -"
b0 1"
b0 5"
b0 9"
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
#10000
0!
0.
#15000
1"
1!
1.
1/
#20000
0!
0.
#25000
b0 &
b0 '
1!
1.
b0 3
b0 2
b0 5
b0 6
b0 )
b0 (
#30000
0!
0.
#35000
1!
1.
#40000
0!
0.
#45000
b10001 *
1!
1#
b10001 $
b1 %
b100010 *
b1 1
b10001 4
10
1.
b10001 U
b10001 }
#50000
0!
0.
#55000
1!
b100010 $
b10 %
b110011 *
b10 1
b100010 4
1.
b100010 T
b100010 #!
#60000
0!
0.
#65000
1!
b110011 $
b11 %
b1000100 *
b11 1
b110011 4
1.
b110011 S
b110011 '!
#70000
0!
0.
#75000
1!
b1000100 $
b100 %
b1010101 *
b100 1
b1000100 4
1.
b1000100 R
b1000100 +!
#80000
0!
0.
#85000
1!
b1010101 $
b101 %
b1100110 *
b101 1
b1010101 4
1.
b1010101 Q
b1010101 /!
#90000
0!
0.
#95000
1!
b1100110 $
b110 %
b1110111 *
b110 1
b1100110 4
1.
b1100110 P
b1100110 3!
#100000
0!
0.
#105000
1!
b1110111 $
b111 %
b10001000 *
b111 1
b1110111 4
1.
b1110111 O
b1110111 7!
#110000
0!
0.
#115000
1!
b10001000 $
b1000 %
b10011001 *
b1000 1
b10001000 4
1.
b10001000 N
b10001000 ;!
#120000
0!
0.
#125000
1!
b10011001 $
b1001 %
b10101010 *
b1001 1
b10011001 4
1.
b10011001 M
b10011001 ?!
#130000
0!
0.
#135000
1!
b10101010 $
b1010 %
b10111011 *
b1010 1
b10101010 4
1.
b10101010 L
b10101010 C!
#140000
0!
0.
#145000
1!
b10111011 $
b1011 %
b11001100 *
b1011 1
b10111011 4
1.
b10111011 K
b10111011 G!
#150000
0!
0.
#155000
1!
b11001100 $
b1100 %
b11011101 *
b1100 1
b11001100 4
1.
b11001100 J
b11001100 K!
#160000
0!
0.
#165000
1!
b11011101 $
b1101 %
b11101110 *
b1101 1
b11011101 4
1.
b11011101 I
b11011101 O!
#170000
0!
0.
#175000
1!
b11101110 $
b1110 %
b11111111 *
b1110 1
b11101110 4
1.
b11101110 H
b11101110 S!
#180000
0!
0.
#185000
1!
b11111111 $
b1111 %
b100010000 *
b1111 1
b11111111 4
1.
b11111111 G
b11111111 W!
#190000
0!
0.
#195000
1!
b100010000 $
b10000 %
b100100001 *
b10000 1
b100010000 4
1.
b100010000 F
b100010000 [!
#200000
0!
0.
#205000
1!
b100100001 $
b10001 %
b100110010 *
b10001 1
b100100001 4
1.
b100100001 E
b100100001 _!
#210000
0!
0.
#215000
1!
b100110010 $
b10010 %
b101000011 *
b10010 1
b100110010 4
1.
b100110010 D
b100110010 c!
#220000
0!
0.
#225000
1!
b101000011 $
b10011 %
b101010100 *
b10011 1
b101000011 4
1.
b101000011 C
b101000011 g!
#230000
0!
0.
#235000
1!
b101010100 $
b10100 %
b101100101 *
b10100 1
b101010100 4
1.
b101010100 B
b101010100 k!
#240000
0!
0.
#245000
1!
b101100101 $
b10101 %
b101110110 *
b10101 1
b101100101 4
1.
b101100101 A
b101100101 o!
#250000
0!
0.
#255000
1!
b101110110 $
b10110 %
b110000111 *
b10110 1
b101110110 4
1.
b101110110 @
b101110110 s!
#260000
0!
0.
#265000
1!
b110000111 $
b10111 %
b110011000 *
b10111 1
b110000111 4
1.
b110000111 ?
b110000111 w!
#270000
0!
0.
#275000
1!
b110011000 $
b11000 %
b110101001 *
b11000 1
b110011000 4
1.
b110011000 >
b110011000 {!
#280000
0!
0.
#285000
1!
b110101001 $
b11001 %
b110111010 *
b11001 1
b110101001 4
1.
b110101001 =
b110101001 !"
#290000
0!
0.
#295000
1!
b110111010 $
b11010 %
b111001011 *
b11010 1
b110111010 4
1.
b110111010 <
b110111010 %"
#300000
0!
0.
#305000
1!
b111001011 $
b11011 %
b111011100 *
b11011 1
b111001011 4
1.
b111001011 ;
b111001011 )"
#310000
0!
0.
#315000
1!
b111011100 $
b11100 %
b111101101 *
b11100 1
b111011100 4
1.
b111011100 :
b111011100 -"
#320000
0!
0.
#325000
1!
b111101101 $
b11101 %
b111111110 *
b11101 1
b111101101 4
1.
b111101101 9
b111101101 1"
#330000
0!
0.
#335000
1!
b111111110 $
b11110 %
b1000001111 *
b11110 1
b111111110 4
1.
b111111110 8
b111111110 5"
#340000
0!
0.
#345000
1!
b1000001111 $
b11111 %
b1000100000 *
b0 +
b10001 ,
b10 ,
b11111 1
b1000001111 4
1.
b1000001111 7
b1000001111 9"
#350000
0!
0.
#355000
1!
b1 &
b10 '
b10 3
b1 2
1.
#360000
0!
0.
#365000
