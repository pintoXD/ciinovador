$date
    Nov 14, 2024  10:38:42
$end
$version
    TOOL:	xmsim(64)	22.09-s013
$end
$timescale
    1 ps
$end

$scope module vote_counter_tb $end
$var reg       4 !    in_word [3:0] $end
$var reg       5 "    out_result [4:0] $end

$scope module dut_counter $end
$var wire      1 #    input_word [3] $end
$var wire      1 $    input_word [2] $end
$var wire      1 %    input_word [1] $end
$var wire      1 &    input_word [0] $end
$var reg       5 '    out_result [4:0] $end
$var reg       1 (    out_0 $end
$var reg       1 )    out_1 $end
$var reg       1 *    out_2 $end
$var reg       1 +    out_3 $end
$var reg       1 ,    out_4 $end
$var reg       1 -    out_5 $end
$var reg       1 .    out_6 $end
$var reg       1 /    out_7 $end

$scope module cmp_inst_0 $end
$var wire      1 #    first_word [3] $end
$var wire      1 $    first_word [2] $end
$var wire      1 %    first_word [1] $end
$var wire      1 &    first_word [0] $end
$var wire      1 0    second_word [3] $end
$var wire      1 1    second_word [2] $end
$var wire      1 2    second_word [1] $end
$var wire      1 3    second_word [0] $end
$var reg       1 4    out $end
$var reg       4 5    xor_result [3:0] $end
$var reg       2 6    mid_out [1:0] $end

$scope module xor_g_0 $end
$var wire      1 7    Y  $end
$var wire      1 &    A  $end
$var wire      1 3    B  $end
$upscope $end


$scope module xor_g_1 $end
$var wire      1 8    Y  $end
$var wire      1 %    A  $end
$var wire      1 2    B  $end
$upscope $end


$scope module xor_g_2 $end
$var wire      1 9    Y  $end
$var wire      1 $    A  $end
$var wire      1 1    B  $end
$upscope $end


$scope module xor_g_3 $end
$var wire      1 :    Y  $end
$var wire      1 #    A  $end
$var wire      1 0    B  $end
$upscope $end


$scope module nor_g_1 $end
$var wire      1 ;    Y  $end
$var wire      1 <    A  $end
$var wire      1 =    B  $end
$var wire      1 >    int_fwire_0  $end
$upscope $end


$scope module nor_g_2 $end
$var wire      1 ?    Y  $end
$var wire      1 @    A  $end
$var wire      1 A    B  $end
$var wire      1 B    int_fwire_0  $end
$upscope $end


$scope module and_g_out $end
$var wire      1 C    Y  $end
$var wire      1 D    A  $end
$var wire      1 E    B  $end
$upscope $end

$upscope $end


$scope module cmp_inst_1 $end
$var wire      1 #    first_word [3] $end
$var wire      1 $    first_word [2] $end
$var wire      1 %    first_word [1] $end
$var wire      1 &    first_word [0] $end
$var wire      1 F    second_word [3] $end
$var wire      1 G    second_word [2] $end
$var wire      1 H    second_word [1] $end
$var wire      1 I    second_word [0] $end
$var reg       1 J    out $end
$var reg       4 K    xor_result [3:0] $end
$var reg       2 L    mid_out [1:0] $end

$scope module xor_g_0 $end
$var wire      1 M    Y  $end
$var wire      1 &    A  $end
$var wire      1 I    B  $end
$upscope $end


$scope module xor_g_1 $end
$var wire      1 N    Y  $end
$var wire      1 %    A  $end
$var wire      1 H    B  $end
$upscope $end


$scope module xor_g_2 $end
$var wire      1 O    Y  $end
$var wire      1 $    A  $end
$var wire      1 G    B  $end
$upscope $end


$scope module xor_g_3 $end
$var wire      1 P    Y  $end
$var wire      1 #    A  $end
$var wire      1 F    B  $end
$upscope $end


$scope module nor_g_1 $end
$var wire      1 Q    Y  $end
$var wire      1 R    A  $end
$var wire      1 S    B  $end
$var wire      1 T    int_fwire_0  $end
$upscope $end


$scope module nor_g_2 $end
$var wire      1 U    Y  $end
$var wire      1 V    A  $end
$var wire      1 W    B  $end
$var wire      1 X    int_fwire_0  $end
$upscope $end


$scope module and_g_out $end
$var wire      1 Y    Y  $end
$var wire      1 Z    A  $end
$var wire      1 [    B  $end
$upscope $end

$upscope $end


$scope module cmp_inst_2 $end
$var wire      1 #    first_word [3] $end
$var wire      1 $    first_word [2] $end
$var wire      1 %    first_word [1] $end
$var wire      1 &    first_word [0] $end
$var wire      1 \    second_word [3] $end
$var wire      1 ]    second_word [2] $end
$var wire      1 ^    second_word [1] $end
$var wire      1 _    second_word [0] $end
$var reg       1 `    out $end
$var reg       4 a    xor_result [3:0] $end
$var reg       2 b    mid_out [1:0] $end

$scope module xor_g_0 $end
$var wire      1 c    Y  $end
$var wire      1 &    A  $end
$var wire      1 _    B  $end
$upscope $end


$scope module xor_g_1 $end
$var wire      1 d    Y  $end
$var wire      1 %    A  $end
$var wire      1 ^    B  $end
$upscope $end


$scope module xor_g_2 $end
$var wire      1 e    Y  $end
$var wire      1 $    A  $end
$var wire      1 ]    B  $end
$upscope $end


$scope module xor_g_3 $end
$var wire      1 f    Y  $end
$var wire      1 #    A  $end
$var wire      1 \    B  $end
$upscope $end


$scope module nor_g_1 $end
$var wire      1 g    Y  $end
$var wire      1 h    A  $end
$var wire      1 i    B  $end
$var wire      1 j    int_fwire_0  $end
$upscope $end


$scope module nor_g_2 $end
$var wire      1 k    Y  $end
$var wire      1 l    A  $end
$var wire      1 m    B  $end
$var wire      1 n    int_fwire_0  $end
$upscope $end


$scope module and_g_out $end
$var wire      1 o    Y  $end
$var wire      1 p    A  $end
$var wire      1 q    B  $end
$upscope $end

$upscope $end


$scope module cmp_inst_3 $end
$var wire      1 #    first_word [3] $end
$var wire      1 $    first_word [2] $end
$var wire      1 %    first_word [1] $end
$var wire      1 &    first_word [0] $end
$var wire      1 r    second_word [3] $end
$var wire      1 s    second_word [2] $end
$var wire      1 t    second_word [1] $end
$var wire      1 u    second_word [0] $end
$var reg       1 v    out $end
$var reg       4 w    xor_result [3:0] $end
$var reg       2 x    mid_out [1:0] $end

$scope module xor_g_0 $end
$var wire      1 y    Y  $end
$var wire      1 &    A  $end
$var wire      1 u    B  $end
$upscope $end


$scope module xor_g_1 $end
$var wire      1 z    Y  $end
$var wire      1 %    A  $end
$var wire      1 t    B  $end
$upscope $end


$scope module xor_g_2 $end
$var wire      1 {    Y  $end
$var wire      1 $    A  $end
$var wire      1 s    B  $end
$upscope $end


$scope module xor_g_3 $end
$var wire      1 |    Y  $end
$var wire      1 #    A  $end
$var wire      1 r    B  $end
$upscope $end


$scope module nor_g_1 $end
$var wire      1 }    Y  $end
$var wire      1 ~    A  $end
$var wire      1 !!   B  $end
$var wire      1 "!   int_fwire_0  $end
$upscope $end


$scope module nor_g_2 $end
$var wire      1 #!   Y  $end
$var wire      1 $!   A  $end
$var wire      1 %!   B  $end
$var wire      1 &!   int_fwire_0  $end
$upscope $end


$scope module and_g_out $end
$var wire      1 '!   Y  $end
$var wire      1 (!   A  $end
$var wire      1 )!   B  $end
$upscope $end

$upscope $end


$scope module cmp_inst_4 $end
$var wire      1 #    first_word [3] $end
$var wire      1 $    first_word [2] $end
$var wire      1 %    first_word [1] $end
$var wire      1 &    first_word [0] $end
$var wire      1 *!   second_word [3] $end
$var wire      1 +!   second_word [2] $end
$var wire      1 ,!   second_word [1] $end
$var wire      1 -!   second_word [0] $end
$var reg       1 .!   out $end
$var reg       4 /!   xor_result [3:0] $end
$var reg       2 0!   mid_out [1:0] $end

$scope module xor_g_0 $end
$var wire      1 1!   Y  $end
$var wire      1 &    A  $end
$var wire      1 -!   B  $end
$upscope $end


$scope module xor_g_1 $end
$var wire      1 2!   Y  $end
$var wire      1 %    A  $end
$var wire      1 ,!   B  $end
$upscope $end


$scope module xor_g_2 $end
$var wire      1 3!   Y  $end
$var wire      1 $    A  $end
$var wire      1 +!   B  $end
$upscope $end


$scope module xor_g_3 $end
$var wire      1 4!   Y  $end
$var wire      1 #    A  $end
$var wire      1 *!   B  $end
$upscope $end


$scope module nor_g_1 $end
$var wire      1 5!   Y  $end
$var wire      1 6!   A  $end
$var wire      1 7!   B  $end
$var wire      1 8!   int_fwire_0  $end
$upscope $end


$scope module nor_g_2 $end
$var wire      1 9!   Y  $end
$var wire      1 :!   A  $end
$var wire      1 ;!   B  $end
$var wire      1 <!   int_fwire_0  $end
$upscope $end


$scope module and_g_out $end
$var wire      1 =!   Y  $end
$var wire      1 >!   A  $end
$var wire      1 ?!   B  $end
$upscope $end

$upscope $end


$scope module cmp_inst_5 $end
$var wire      1 #    first_word [3] $end
$var wire      1 $    first_word [2] $end
$var wire      1 %    first_word [1] $end
$var wire      1 &    first_word [0] $end
$var wire      1 @!   second_word [3] $end
$var wire      1 A!   second_word [2] $end
$var wire      1 B!   second_word [1] $end
$var wire      1 C!   second_word [0] $end
$var reg       1 D!   out $end
$var reg       4 E!   xor_result [3:0] $end
$var reg       2 F!   mid_out [1:0] $end

$scope module xor_g_0 $end
$var wire      1 G!   Y  $end
$var wire      1 &    A  $end
$var wire      1 C!   B  $end
$upscope $end


$scope module xor_g_1 $end
$var wire      1 H!   Y  $end
$var wire      1 %    A  $end
$var wire      1 B!   B  $end
$upscope $end


$scope module xor_g_2 $end
$var wire      1 I!   Y  $end
$var wire      1 $    A  $end
$var wire      1 A!   B  $end
$upscope $end


$scope module xor_g_3 $end
$var wire      1 J!   Y  $end
$var wire      1 #    A  $end
$var wire      1 @!   B  $end
$upscope $end


$scope module nor_g_1 $end
$var wire      1 K!   Y  $end
$var wire      1 L!   A  $end
$var wire      1 M!   B  $end
$var wire      1 N!   int_fwire_0  $end
$upscope $end


$scope module nor_g_2 $end
$var wire      1 O!   Y  $end
$var wire      1 P!   A  $end
$var wire      1 Q!   B  $end
$var wire      1 R!   int_fwire_0  $end
$upscope $end


$scope module and_g_out $end
$var wire      1 S!   Y  $end
$var wire      1 T!   A  $end
$var wire      1 U!   B  $end
$upscope $end

$upscope $end


$scope module cmp_inst_6 $end
$var wire      1 #    first_word [3] $end
$var wire      1 $    first_word [2] $end
$var wire      1 %    first_word [1] $end
$var wire      1 &    first_word [0] $end
$var wire      1 V!   second_word [3] $end
$var wire      1 W!   second_word [2] $end
$var wire      1 X!   second_word [1] $end
$var wire      1 Y!   second_word [0] $end
$var reg       1 Z!   out $end
$var reg       4 [!   xor_result [3:0] $end
$var reg       2 \!   mid_out [1:0] $end

$scope module xor_g_0 $end
$var wire      1 ]!   Y  $end
$var wire      1 &    A  $end
$var wire      1 Y!   B  $end
$upscope $end


$scope module xor_g_1 $end
$var wire      1 ^!   Y  $end
$var wire      1 %    A  $end
$var wire      1 X!   B  $end
$upscope $end


$scope module xor_g_2 $end
$var wire      1 _!   Y  $end
$var wire      1 $    A  $end
$var wire      1 W!   B  $end
$upscope $end


$scope module xor_g_3 $end
$var wire      1 `!   Y  $end
$var wire      1 #    A  $end
$var wire      1 V!   B  $end
$upscope $end


$scope module nor_g_1 $end
$var wire      1 a!   Y  $end
$var wire      1 b!   A  $end
$var wire      1 c!   B  $end
$var wire      1 d!   int_fwire_0  $end
$upscope $end


$scope module nor_g_2 $end
$var wire      1 e!   Y  $end
$var wire      1 f!   A  $end
$var wire      1 g!   B  $end
$var wire      1 h!   int_fwire_0  $end
$upscope $end


$scope module and_g_out $end
$var wire      1 i!   Y  $end
$var wire      1 j!   A  $end
$var wire      1 k!   B  $end
$upscope $end

$upscope $end


$scope module cmp_inst_7 $end
$var wire      1 #    first_word [3] $end
$var wire      1 $    first_word [2] $end
$var wire      1 %    first_word [1] $end
$var wire      1 &    first_word [0] $end
$var wire      1 l!   second_word [3] $end
$var wire      1 m!   second_word [2] $end
$var wire      1 n!   second_word [1] $end
$var wire      1 o!   second_word [0] $end
$var reg       1 p!   out $end
$var reg       4 q!   xor_result [3:0] $end
$var reg       2 r!   mid_out [1:0] $end

$scope module xor_g_0 $end
$var wire      1 s!   Y  $end
$var wire      1 &    A  $end
$var wire      1 o!   B  $end
$upscope $end


$scope module xor_g_1 $end
$var wire      1 t!   Y  $end
$var wire      1 %    A  $end
$var wire      1 n!   B  $end
$upscope $end


$scope module xor_g_2 $end
$var wire      1 u!   Y  $end
$var wire      1 $    A  $end
$var wire      1 m!   B  $end
$upscope $end


$scope module xor_g_3 $end
$var wire      1 v!   Y  $end
$var wire      1 #    A  $end
$var wire      1 l!   B  $end
$upscope $end


$scope module nor_g_1 $end
$var wire      1 w!   Y  $end
$var wire      1 x!   A  $end
$var wire      1 y!   B  $end
$var wire      1 z!   int_fwire_0  $end
$upscope $end


$scope module nor_g_2 $end
$var wire      1 {!   Y  $end
$var wire      1 |!   A  $end
$var wire      1 }!   B  $end
$var wire      1 ~!   int_fwire_0  $end
$upscope $end


$scope module and_g_out $end
$var wire      1 !"   Y  $end
$var wire      1 ""   A  $end
$var wire      1 #"   B  $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
b0 !
b1 "
0#
0$
0%
0&
b1 '
1(
0)
0*
0+
0,
0-
0.
0/
00
01
02
03
14
b0 5
b11 6
07
08
09
0:
1;
0<
0=
0>
1?
0@
0A
0B
1C
1D
1E
0F
0G
0H
1I
0J
b1 K
b10 L
1M
0N
0O
0P
0Q
1R
0S
1T
1U
0V
0W
0X
0Y
0Z
1[
0\
0]
1^
0_
0`
b10 a
b10 b
0c
1d
0e
0f
0g
0h
1i
1j
1k
0l
0m
0n
0o
0p
1q
0r
0s
1t
1u
0v
b11 w
b10 x
1y
1z
0{
0|
0}
1~
1!!
1"!
1#!
0$!
0%!
0&!
0'!
0(!
1)!
0*!
1+!
0,!
0-!
0.!
b100 /!
b1 0!
01!
02!
13!
04!
15!
06!
07!
08!
09!
1:!
0;!
1<!
0=!
1>!
0?!
0@!
1A!
0B!
1C!
0D!
b101 E!
b0 F!
1G!
0H!
1I!
0J!
0K!
1L!
0M!
1N!
0O!
1P!
0Q!
1R!
0S!
0T!
0U!
0V!
1W!
1X!
0Y!
0Z!
b110 [!
b0 \!
0]!
1^!
1_!
0`!
0a!
0b!
1c!
1d!
0e!
1f!
0g!
1h!
0i!
0j!
0k!
0l!
1m!
1n!
1o!
0p!
b111 q!
b0 r!
1s!
1t!
1u!
0v!
0w!
1x!
1y!
1z!
0{!
1|!
0}!
1~!
0!"
0""
0#"
$end
#5
b1 !
1&
0s!
1]!
0G!
11!
0y
1c
0M
17
b110 q!
b111 [!
b100 E!
b101 /!
b10 w
b11 a
b0 K
b1 5
1<
0R
1h
0~
16!
0L!
1b!
0x!
0N!
18!
0T
1>
0;
1Q
05!
1K!
b10 6
b11 L
b0 0!
b1 F!
1T!
0>!
1Z
0D
0C
1Y
04
1J
1)
0(
b10 '
b10 "
#10
b10 !
1%
0&
1s!
0]!
1G!
01!
1y
0c
1M
07
0t!
0^!
1H!
12!
0z
0d
1N
18
b111 q!
b110 [!
b101 E!
b100 /!
b11 w
b10 a
b1 K
b0 5
b101 q!
b100 [!
b111 E!
b110 /!
b1 w
b0 a
b11 K
b10 5
1=
0<
1S
1R
0i
0h
0!!
1~
17!
06!
1M!
1L!
0c!
0b!
0y!
1x!
0d!
1N!
0j
1T
0Q
1g
0K!
1a!
b10 L
b11 b
b0 F!
b1 \!
1j!
0T!
1p
0Z
0Y
1o
0J
1`
1*
0)
#15
b11 !
1&
0s!
1]!
0G!
11!
0y
1c
0M
17
b100 q!
b101 [!
b110 E!
b111 /!
b0 w
b1 a
b10 K
b11 5
1<
0R
1h
0~
16!
0L!
1b!
0x!
0z!
1d!
0"!
1j
0g
1}
0a!
1w!
b10 b
b11 x
b0 \!
b1 r!
1""
0j!
1(!
0p
0o
1'!
0`
1v
1+
0*
b100 '
b100 "
#20
b100 !
1$
0%
0&
1s!
0]!
1G!
01!
1y
0c
1M
07
1t!
1^!
0H!
02!
1z
1d
0N
08
0u!
0_!
0I!
03!
1{
1e
1O
19
b101 q!
b100 [!
b111 E!
b110 /!
b1 w
b0 a
b11 K
b10 5
b111 q!
b110 [!
b101 E!
b100 /!
b11 w
b10 a
b1 K
b0 5
b11 q!
b10 [!
b1 E!
b0 /!
b111 w
b110 a
b101 K
b100 5
1@
0=
0<
1V
0S
1R
1l
1i
0h
1$!
1!!
1~
0:!
07!
06!
0P!
0M!
1L!
0f!
1c!
0b!
0|!
1y!
1x!
1z!
0~!
0h!
0R!
08!
0<!
1"!
1&!
1n
1X
0>
1B
0?
1;
0U
0k
0#!
0}
19!
15!
1O!
1e!
1{!
0w!
b0 6
b1 6
b0 L
b0 b
b1 x
b0 x
b10 0!
b11 0!
b10 F!
b10 \!
b11 r!
b10 r!
1#"
0""
1k!
1U!
1?!
1>!
0)!
0(!
0q
0[
0E
1D
0'!
1=!
0v
1.!
1,
0+
b10 '
b10 "
#25
b101 !
1&
0s!
1]!
0G!
11!
0y
1c
0M
17
b10 q!
b11 [!
b0 E!
b1 /!
b110 w
b111 a
b100 K
b101 5
1<
0R
1h
0~
16!
0L!
1b!
0x!
0N!
18!
0T
1>
0;
1Q
05!
1K!
b0 6
b1 L
b10 0!
b11 F!
1T!
0>!
1Z
0D
0=!
1S!
0.!
1D!
1-
0,
b100 '
b100 "
#30
b110 !
1%
0&
1s!
0]!
1G!
01!
1y
0c
1M
07
0t!
0^!
1H!
12!
0z
0d
1N
18
b11 q!
b10 [!
b1 E!
b0 /!
b111 w
b110 a
b101 K
b100 5
b1 q!
b0 [!
b11 E!
b10 /!
b101 w
b100 a
b111 K
b110 5
1=
0<
1S
1R
0i
0h
0!!
1~
17!
06!
1M!
1L!
0c!
0b!
0y!
1x!
0d!
1N!
0j
1T
0Q
1g
0K!
1a!
b0 L
b1 b
b10 F!
b11 \!
1j!
0T!
1p
0Z
0S!
1i!
0D!
1Z!
1.
0-
#35
b111 !
1&
0s!
1]!
0G!
11!
0y
1c
0M
17
b0 q!
b1 [!
b10 E!
b11 /!
b100 w
b101 a
b110 K
b111 5
1<
0R
1h
0~
16!
0L!
1b!
0x!
0z!
1d!
0"!
1j
0g
1}
0a!
1w!
b0 b
b1 x
b10 \!
b11 r!
1""
0j!
1(!
0p
0i!
1!"
0Z!
1p!
1/
0.
b1000 '
b1000 "
#40
